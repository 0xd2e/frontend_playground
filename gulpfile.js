'use strict';

/* eslint-env node, amd */
/* eslint one-var: "off" */


const gulp = require('gulp'),
      pump = require('pump'),
      autoprefixer = require('autoprefixer');


// Gulp plugins
const cleancss  = require('gulp-clean-css'), // eslint-disable-line no-multi-spaces
      eslint    = require('gulp-eslint'),    // eslint-disable-line no-multi-spaces
      htmlmin   = require('gulp-htmlmin'),   // eslint-disable-line no-multi-spaces
      imagemin  = require('gulp-imagemin'),  // eslint-disable-line no-multi-spaces
      nunjucks  = require('gulp-nunjucks'),  // eslint-disable-line no-multi-spaces
      postcss   = require('gulp-postcss'),   // eslint-disable-line no-multi-spaces
      sass      = require('gulp-sass'),      // eslint-disable-line no-multi-spaces
      size      = require('gulp-size'),      // eslint-disable-line no-multi-spaces
      stylelint = require('gulp-stylelint'),
      uglifyComposer = require('gulp-uglify/composer'),
      jsmin = uglifyComposer(require('uglify-es'), console);


const paths = {
  src: {
    js: ['src/**/*.js', '!src/**/_*.js'],
    html: ['src/**/*.html', '!src/**/_*.html'],
    scss: 'src/**/*.scss',
    root: 'src/',
    img: 'src/**/*.+(png|jpg|jpeg|gif)'
  },
  out: 'build/'
};


function buildScripts(done) {

  // List additional command line parameters
  // console.log(process.argv);

  const eslintOptions = {
    allowInlineConfig: true,
    cache: true,
    fix: false,
    globals: [],
    quiet: false,
    reportUnusedDisableDirectives: false,
    useEslintrc: true
  };

  // https://github.com/mishoo/UglifyJS2#minify-options
  const jsminOptions = {

    compress: {
      drop_console: true,
      keep_infinity: true,
      passes: 2,
      toplevel: false,
      warnings: true
    },

    mangle: {
      eval: false
    },

    output: {
      ascii_only: true,
      shebang: true,
      webkit: false,
      wrap_iife: false
    },

    sourceMap: false,
    toplevel: false,
    ie8: false,
    warnings: false
  };

  const steps = [
    gulp.src(paths.src.js),
    eslint(eslintOptions),
    eslint.failAfterError(),
    jsmin(jsminOptions),
    size({
      title: '[Scripts]',
      gzip: false,
      pretty: true,
      showFiles: true,
      showTotal: true,
    }),
    gulp.dest(paths.out)
  ];

  pump(steps, done);
}


function buildPages(done) {

  const templContextData = {};

  const templOptions = {
    autoescape: true,
    trimBlocks: true,
    path: paths.src.root
  };

  // https://github.com/kangax/html-minifier
  const minOptions = {
    caseSensitive: false,
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: true,
    collapseWhitespace: true,
    conservativeCollapse: false,
    decodeEntities: false,
    html5: true,
    includeAutoGeneratedTags: true,
    keepClosingSlash: false,
    minifyCSS: false,
    jsmin: false,
    minifyURLs: false,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: false,
    quoteCharacter: '"',
    removeAttributeQuotes: false,
    removeComments: true,
    removeEmptyAttributes: true,
    removeEmptyElements: false,
    removeOptionalTags: false,
    removeRedundantAttributes: false,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: false,
    sortAttributes: false,
    sortClassName: false,
    trimCustomFragments: true
  };

  const steps = [
    gulp.src(paths.src.html),
    nunjucks.compile(templContextData, templOptions),
    htmlmin(minOptions),
    size({
      title: '[Pages]',
      gzip: false,
      pretty: true,
      showFiles: true,
      showTotal: true,
    }),
    gulp.dest(paths.out)
  ];

  pump(steps, done);
}


function buildStyles(done) {

  // https://github.com/stylelint/stylelint/blob/HEAD/docs/user-guide.md
  const lintOptions = {
    debug: false,
    failAfterError: true,
    fix: false,
    reporters: [
      { formatter: 'string', console: true }
    ]
  };

  // https://github.com/sass/node-sass#options
  const sassOptions = {
    indentType: 'space',
    indentWidth: 4,
    linefeed: 'lf',
    outputStyle: 'nested',
    precision: 3,
    sourceComments: false,
    sourceMap: false,
    sourceMapContents: false,
    sourceMapEmbed: false
  };

  const autoprefixerOptions = {
    cascade: true,
    add: true,
    remove: true,
    supports: false,
    flexbox: false,
    grid: false,
    ignoreUnknownVersions: false
  };

  // https://github.com/postcss/postcss/blob/master/docs/plugins.md
  const postcssPlugins = [
    autoprefixer(autoprefixerOptions)
  ];

  // https://github.com/jakubpawlowicz/clean-css#how-to-use-clean-css-api
  const minOptions = {
    compatibility: '*',
    format: false,
    level: {
      1: { all: true },
      2: { all: true }
    },
    returnPromise: false,
    sourceMap: false,
    sourceMapInlineSources: false
  };

  const steps = [
    gulp.src(paths.src.scss),
    stylelint(lintOptions),
    sass(sassOptions),
    postcss(postcssPlugins),
    cleancss(minOptions),
    size({
      title: '[Styles]',
      gzip: false,
      pretty: true,
      showFiles: true,
      showTotal: true,
    }),
    gulp.dest(paths.out)
  ];

  pump(steps, done);
}


function optimizeImages(done) {

  const options = [

    // GIF
    imagemin.gifsicle({
      interlaced: true,
      optimizationLevel: 2 // value between 1 and 3
    }),

    // JPEG
    imagemin.jpegtran({
      progressive: true,
      arithmetic: false // valid only for lossless conversion (when progressive is set to false)
    }),

    // PNG
    imagemin.optipng({
      optimizationLevel: 5 // value between 1 and 7
    })
  ];

  pump([
    gulp.src(paths.src.img),
    imagemin(options),
    gulp.dest(paths.out)
  ], done);
}


// https://medium.com/gulpjs/gulp-sips-custom-task-metadata-9a2dc80ac7b1
buildScripts.description = 'Lint and minify JavaScript';
buildPages.description = 'Compile Nunjucks templates to HTML and minify HTML';
buildStyles.description = 'Lint SCSS, compile SCSS to CSS, and minify CSS';
optimizeImages.description = 'Optimize (reduce) size of images';

gulp.task('scripts', buildScripts);
gulp.task('pages', buildPages);
gulp.task('styles', buildStyles);
gulp.task('imgmin', optimizeImages);

const defaultTasks = gulp.parallel('pages', 'scripts', 'styles');
defaultTasks.description = 'Build entire project';

gulp.task('default', defaultTasks);
